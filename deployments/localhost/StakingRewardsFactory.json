{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingRewardsGenesis",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifyRewardAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullExtraTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingRewardsGenesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingRewardsInfoByStakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingRewards",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x846c6d73b02d24d0dc426fea8d4ed3d8c88e6e5eb3d37c36bccd9d9af16ad4c4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1890922",
    "logsBloom": "0x
    "blockHash": "0xddcb57309df06610e2a248e4f8877e96911eebd265be755c75d3536554b79059",
    "transactionHash": "0x846c6d73b02d24d0dc426fea8d4ed3d8c88e6e5eb3d37c36bccd9d9af16ad4c4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x846c6d73b02d24d0dc426fea8d4ed3d8c88e6e5eb3d37c36bccd9d9af16ad4c4",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xddcb57309df06610e2a248e4f8877e96911eebd265be755c75d3536554b79059"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "1890922",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    1650986130
  ],
  "numDeployments": 1,
  "solcInputHash": "b2cd6048e1c455e76082412ea95e5049",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardsGenesis\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyRewardAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullExtraTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardsGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewardsInfoByStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/synth/StakingRewardsFactory.sol\":\"StakingRewardsFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/synth/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IStakingRewards {\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Mutative\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n}\",\"keccak256\":\"0x6a4778c283199ef3ae35ddd30f42eb6247fb58981f269ab1a970450199d7c8e5\",\"license\":\"MIT\"},\"contracts/synth/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IUniswapV2ERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\",\"keccak256\":\"0x649f773b94b855d44ab5c5d3ed2e0b429fdbafbd8292f8ee6462de764754c583\"},\"contracts/synth/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IStakingRewards.sol\\\";\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\nabstract contract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * > Note that this information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * `IERC20.balanceOf` and `IERC20.transfer`.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\nabstract contract RewardsDistributionRecipient {\\n    address public rewardsDistribution;\\n\\n    function notifyRewardAmount(uint256 reward, uint256 duration) external virtual;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"Caller is not RewardsDistribution contract\\\");\\n        _;\\n    }\\n}\\n\\ncontract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _rewardsDistribution,\\n        address _rewardsToken,\\n        address _stakingToken\\n    ) public {\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view override returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view override returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address account) public view override returns (uint256) {\\n        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n\\n        // permit\\n        IUniswapV2ERC20(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function stake(uint256 amount) external override nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public override nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external override {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 reward, uint256 rewardsDuration) external override onlyRewardsDistribution updateReward(address(0)) {\\n        require(block.timestamp.add(rewardsDuration) >= periodFinish, \\\"Cannot reduce existing period\\\");\\n    \\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint balance = rewardsToken.balanceOf(address(this));\\n        require(rewardRate <= balance.div(rewardsDuration), \\\"Provided reward too high\\\");\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward, periodFinish);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward, uint256 periodFinish);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n}\",\"keccak256\":\"0x7b8af0774dbd23ec7c2e2f2dcbf458ea0ef41f3f5cfd92948e0a8124962ec9b6\",\"license\":\"MIT\"},\"contracts/synth/StakingRewardsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./StakingRewards.sol\\\";\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ncontract StakingRewardsFactory is Ownable {\\n    // immutables\\n    address public rewardsToken;\\n    uint public stakingRewardsGenesis;\\n\\n    // the staking tokens for which the rewards contract has been deployed\\n    address[] public stakingTokens;\\n\\n    // info about rewards for a particular staking token\\n    struct StakingRewardsInfo {\\n        address stakingRewards;\\n        uint rewardAmount;\\n        uint duration;\\n    }\\n\\n    // rewards info by staking token\\n    mapping(address => StakingRewardsInfo) public stakingRewardsInfoByStakingToken;\\n\\n    constructor(\\n        address _rewardsToken,\\n        uint _stakingRewardsGenesis\\n    ) Ownable() public {\\n        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\\n\\n        rewardsToken = _rewardsToken;\\n        stakingRewardsGenesis = _stakingRewardsGenesis;\\n    }\\n\\n    ///// permissioned functions\\n\\n    // deploy a staking reward contract for the staking token, and store the reward amount\\n    // the reward will be distributed to the staking reward contract no sooner than the genesis\\n    function deploy(address stakingToken, uint rewardAmount, uint256 rewardsDuration) public onlyOwner {\\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];\\n        require(info.stakingRewards == address(0), 'StakingRewardsFactory::deploy: already deployed');\\n\\n        info.stakingRewards = address(new StakingRewards(/*_rewardsDistribution=*/ address(this), rewardsToken, stakingToken));\\n        info.rewardAmount = rewardAmount;\\n        info.duration = rewardsDuration;\\n        stakingTokens.push(stakingToken);\\n    }\\n\\n    function update(address stakingToken, uint rewardAmount, uint256 rewardsDuration) public onlyOwner {\\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];\\n        require(info.stakingRewards != address(0), 'StakingRewardsFactory::update: not deployed');\\n\\n        info.rewardAmount = rewardAmount;\\n        info.duration = rewardsDuration;\\n    }\\n\\n\\n\\n    ///// permissionless functions\\n\\n    // call notifyRewardAmount for all staking tokens.\\n    function notifyRewardAmounts() public {\\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\\n        for (uint i = 0; i < stakingTokens.length; i++) {\\n            notifyRewardAmount(stakingTokens[i]);\\n        }\\n    }\\n\\n    // notify reward amount for an individual staking token.\\n    // this is a fallback in case the notifyRewardAmounts costs too much gas to call for all contracts\\n    function notifyRewardAmount(address stakingToken) public {\\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmount: not ready');\\n\\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];\\n        require(info.stakingRewards != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\\n\\n        if (info.rewardAmount > 0 && info.duration > 0) {\\n            uint rewardAmount = info.rewardAmount;\\n            uint256 duration = info.duration;\\n            info.rewardAmount = 0;\\n            info.duration = 0;\\n\\n            require(\\n                IERC20(rewardsToken).transfer(info.stakingRewards, rewardAmount),\\n                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\\n            );\\n            StakingRewards(info.stakingRewards).notifyRewardAmount(rewardAmount, duration);\\n        }\\n    }\\n\\n    function pullExtraTokens(address token, uint256 amount) external onlyOwner {\\n        IERC20(token).transfer(msg.sender, amount);\\n    }\\n}\",\"keccak256\":\"0x67bc1d18b382c741943cdec60b448089ae8e2ed324cd047eb4c0472dcf905853\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516121293803806121298339818101604052604081101561003357600080fd5b50805160209091015160006100466100f8565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350428110156100cf5760405162461bcd60e51b81526004018080602001828103825260348152602001806120f56034913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0393909316929092179091556002556100fc565b3390565b611fea8061010b6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a0928c1111610071578063a0928c11146101a4578063ae741d8d146101be578063cfda5478146101c6578063d09b6d43146101f8578063d1af0c7d1461022a578063f2fde38b14610232576100b4565b8063344e5e34146100b95780636cf8caf8146100f2578063715018a6146101405780637572719e1461014a57806381e16298146101765780638da5cb5b1461019c575b600080fd5b6100d6600480360360208110156100cf57600080fd5b5035610258565b604080516001600160a01b039092168252519081900360200190f35b6101186004803603602081101561010857600080fd5b50356001600160a01b031661027f565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b6101486102aa565b005b6101486004803603604081101561016057600080fd5b506001600160a01b038135169060200135610356565b6101486004803603602081101561018c57600080fd5b50356001600160a01b0316610437565b6100d6610639565b6101ac610648565b60408051918252519081900360200190f35b61014861064e565b610148600480360360608110156101dc57600080fd5b506001600160a01b0381351690602081013590604001356106ce565b6101486004803603606081101561020e57600080fd5b506001600160a01b038135169060208101359060400135610854565b6100d6610920565b6101486004803603602081101561024857600080fd5b50356001600160a01b031661092f565b6003818154811061026557fe5b6000918252602090912001546001600160a01b0316905081565b6004602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b6102b2610a31565b6001600160a01b03166102c3610639565b6001600160a01b03161461030c576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61035e610a31565b6001600160a01b031661036f610639565b6001600160a01b0316146103b8576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506040513d602081101561043157600080fd5b50505050565b6002544210156104785760405162461bcd60e51b8152600401808060200182810382526034815260200180611f4a6034913960400191505060405180910390fd5b6001600160a01b03808216600090815260046020526040902080549091166104d15760405162461bcd60e51b8152600401808060200182810382526037815260200180611f7e6037913960400191505060405180910390fd5b600081600101541180156104e9575060008160020154115b15610635576001808201805460028401805460009384905590839055925484546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051939594919092169263a9059cbb926044808201936020939283900390910190829087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b505050506040513d602081101561058a57600080fd5b50516105c75760405162461bcd60e51b815260040180806020018281038252603a815260200180611f10603a913960400191505060405180910390fd5b82546040805163246132f960e01b8152600481018590526024810184905290516001600160a01b039092169163246132f99160448082019260009290919082900301818387803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b5050505050505b5050565b6000546001600160a01b031690565b60025481565b60035461068c5760405162461bcd60e51b8152600401808060200182810382526045815260200180611ecb6045913960600191505060405180910390fd5b60005b6003548110156106cb576106c3600382815481106106a957fe5b6000918252602090912001546001600160a01b0316610437565b60010161068f565b50565b6106d6610a31565b6001600160a01b03166106e7610639565b6001600160a01b031614610730576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020526040902080549091161561078a5760405162461bcd60e51b815260040180806020018281038252602f815260200180611e7c602f913960400191505060405180910390fd5b60015460405130916001600160a01b03169086906107a790610a35565b6001600160a01b03938416815291831660208301529091166040808301919091525190819003606001906000f0801580156107e6573d6000803e3d6000fd5b5081546001600160a01b03199081166001600160a01b039283161783556001808401959095556002909201929092556003805493840181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90920180549092169216919091179055565b61085c610a31565b6001600160a01b031661086d610639565b6001600160a01b0316146108b6576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6001600160a01b038084166000908152600460205260409020805490911661090f5760405162461bcd60e51b815260040180806020018281038252602b815260200180611e51602b913960400191505060405180910390fd5b600181019290925560029091015550565b6001546001600160a01b031681565b610937610a31565b6001600160a01b0316610948610639565b6001600160a01b031614610991576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6001600160a01b0381166109d65760405162461bcd60e51b8152600401808060200182810382526026815260200180611e2b6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6113e880610a438339019056fe60806040526000600455600060055534801561001a57600080fd5b506040516113e83803806113e88339818101604052606081101561003d57600080fd5b508051602082015160409092015160018055600280546001600160a01b039485166001600160a01b03199182161790915560038054928516928216929092179091556000805493909216921691909117905561134a8061009e6000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c806380faa57d116100ad578063d1af0c7d11610071578063d1af0c7d14610295578063df136d651461029d578063e9fad8ee146102a5578063ebe2b12b146102ad578063ecd9ba82146102b55761012b565b806380faa57d1461023a5780638b87634714610242578063a694fc3a14610268578063c8f33c9114610285578063cd3daf9d1461028d5761012b565b80633d18b912116100f45780633d18b912146101d85780633fc6df6e146101e057806370a082311461020457806372f702f31461022a5780637b0a47ee146102325761012b565b80628cc262146101305780630700037d1461016857806318160ddd1461018e578063246132f9146101965780632e1a7d4d146101bb575b600080fd5b6101566004803603602081101561014657600080fd5b50356001600160a01b03166102ed565b60408051918252519081900360200190f35b6101566004803603602081101561017e57600080fd5b50356001600160a01b031661036b565b61015661037d565b6101b9600480360360408110156101ac57600080fd5b5080359060200135610384565b005b6101b9600480360360208110156101d157600080fd5b5035610612565b6101b9610795565b6101e86108b9565b604080516001600160a01b039092168252519081900360200190f35b6101566004803603602081101561021a57600080fd5b50356001600160a01b03166108c8565b6101e86108e3565b6101566108f2565b6101566108f8565b6101566004803603602081101561025857600080fd5b50356001600160a01b031661090b565b6101b96004803603602081101561027e57600080fd5b503561091d565b610156610a9e565b610156610aa4565b6101e8610af2565b610156610b01565b6101b9610b07565b610156610b2a565b6101b9600480360360a08110156102cb57600080fd5b5080359060208101359060ff6040820135169060608101359060800135610b30565b6001600160a01b0381166000908152600960209081526040808320546008909252822054610365919061035f90670de0b6b3a7640000906103599061033a90610334610aa4565b90610d40565b6001600160a01b0388166000908152600b602052604090205490610d9d565b90610dfd565b90610e64565b92915050565b60096020526000908152604090205481565b600a545b90565b6000546001600160a01b031633146103cd5760405162461bcd60e51b815260040180806020018281038252602a8152602001806112c1602a913960400191505060405180910390fd5b60006103d7610aa4565b6007556103e26108f8565b6006556001600160a01b03811615610429576103fd816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b6004546104364284610e64565b1015610489576040805162461bcd60e51b815260206004820152601d60248201527f43616e6e6f7420726564756365206578697374696e6720706572696f64000000604482015290519081900360640190fd5b60045442106104a45761049c8383610dfd565b6005556104e3565b6004546000906104b49042610d40565b905060006104cd60055483610d9d90919063ffffffff16565b90506104dd846103598784610e64565b60055550505b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561052e57600080fd5b505afa158015610542573d6000803e3d6000fd5b505050506040513d602081101561055857600080fd5b505190506105668184610dfd565b60055411156105bc576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b4260068190556105cc9084610e64565b600481905560408051868152602081019290925280517f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f559281900390910190a150505050565b60026001541415610658576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b600260015533610666610aa4565b6007556106716108f8565b6006556001600160a01b038116156106b85761068c816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b60008211610701576040805162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b604482015290519081900360640190fd5b600a5461070e9083610d40565b600a55336000908152600b602052604090205461072b9083610d40565b336000818152600b6020526040902091909155600354610757916001600160a01b039091169084610ebe565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a2505060018055565b600260015414156107db576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b6002600155336107e9610aa4565b6007556107f46108f8565b6006556001600160a01b0381161561083b5761080f816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b3360009081526009602052604090205480156108b1573360008181526009602052604081205560025461087a916001600160a01b039091169083610ebe565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505060018055565b6000546001600160a01b031681565b6001600160a01b03166000908152600b602052604090205490565b6003546001600160a01b031681565b60055481565b600061090642600454610f15565b905090565b60086020526000908152604090205481565b60026001541415610963576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b600260015533610971610aa4565b60075561097c6108f8565b6006556001600160a01b038116156109c357610997816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b60008211610a09576040805162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015290519081900360640190fd5b600a54610a169083610e64565b600a55336000908152600b6020526040902054610a339083610e64565b336000818152600b6020526040902091909155600354610a60916001600160a01b03909116903085610f2b565b60408051838152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a2505060018055565b60065481565b6000600a5460001415610aba5750600754610381565b610906610ae9600a54610359670de0b6b3a7640000610ae3600554610ae36006546103346108f8565b90610d9d565b60075490610e64565b6002546001600160a01b031681565b60075481565b336000908152600b6020526040902054610b2090610612565b610b28610795565b565b60045481565b60026001541415610b76576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b600260015533610b84610aa4565b600755610b8f6108f8565b6006556001600160a01b03811615610bd657610baa816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b60008611610c1c576040805162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015290519081900360640190fd5b600a54610c299087610e64565b600a55336000908152600b6020526040902054610c469087610e64565b336000818152600b602052604080822093909355600354835163d505accf60e01b81526004810193909352306024840152604483018a90526064830189905260ff8816608484015260a4830187905260c4830186905292516001600160a01b039093169263d505accf9260e480820193929182900301818387803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b5050600354610cfe92506001600160a01b03169050333089610f2b565b60408051878152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a250506001805550505050565b600082821115610d97576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082610dac57506000610365565b82820282848281610db957fe5b0414610df65760405162461bcd60e51b81526004018080602001828103825260218152602001806112a06021913960400191505060405180910390fd5b9392505050565b6000808211610e53576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610e5c57fe5b049392505050565b600082820183811015610df6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f10908490610f8b565b505050565b6000818310610f245781610df6565b5090919050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610f85908590610f8b565b50505050565b6060610fe0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661103c9092919063ffffffff16565b805190915015610f1057808060200190516020811015610fff57600080fd5b5051610f105760405162461bcd60e51b815260040180806020018281038252602a8152602001806112eb602a913960400191505060405180910390fd5b606061104b8484600085611053565b949350505050565b6060824710156110945760405162461bcd60e51b815260040180806020018281038252602681526020018061127a6026913960400191505060405180910390fd5b61109d856111af565b6110ee576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061112d5780518252601f19909201916020918201910161110e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461118f576040519150601f19603f3d011682016040523d82523d6000602084013e611194565b606091505b50915091506111a48282866111b5565b979650505050505050565b3b151590565b606083156111c4575081610df6565b8251156111d45782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561121e578181015183820152602001611206565b50505050905090810190601f16801561124b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a98cc374ed321108ca93d1cb79691ac605e09e11e7a4873acee7a64589b3b08b64736f6c634300060c00334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735374616b696e6752657761726473466163746f72793a3a7570646174653a206e6f74206465706c6f7965645374616b696e6752657761726473466163746f72793a3a6465706c6f793a20616c7265616479206465706c6f7965644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e74733a2063616c6c6564206265666f726520616e79206465706c6f79735374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e743a207472616e73666572206661696c65645374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e743a206e6f742072656164795374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e743a206e6f74206465706c6f796564a26469706673582212207de2bcf65422c070b148738fb1e1ad24440503c7b06918e4e81ff4dc5e36f7a764736f6c634300060c00335374616b696e6752657761726473466163746f72793a3a636f6e7374727563746f723a2067656e6573697320746f6f20736f6f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a0928c1111610071578063a0928c11146101a4578063ae741d8d146101be578063cfda5478146101c6578063d09b6d43146101f8578063d1af0c7d1461022a578063f2fde38b14610232576100b4565b8063344e5e34146100b95780636cf8caf8146100f2578063715018a6146101405780637572719e1461014a57806381e16298146101765780638da5cb5b1461019c575b600080fd5b6100d6600480360360208110156100cf57600080fd5b5035610258565b604080516001600160a01b039092168252519081900360200190f35b6101186004803603602081101561010857600080fd5b50356001600160a01b031661027f565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b6101486102aa565b005b6101486004803603604081101561016057600080fd5b506001600160a01b038135169060200135610356565b6101486004803603602081101561018c57600080fd5b50356001600160a01b0316610437565b6100d6610639565b6101ac610648565b60408051918252519081900360200190f35b61014861064e565b610148600480360360608110156101dc57600080fd5b506001600160a01b0381351690602081013590604001356106ce565b6101486004803603606081101561020e57600080fd5b506001600160a01b038135169060208101359060400135610854565b6100d6610920565b6101486004803603602081101561024857600080fd5b50356001600160a01b031661092f565b6003818154811061026557fe5b6000918252602090912001546001600160a01b0316905081565b6004602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b6102b2610a31565b6001600160a01b03166102c3610639565b6001600160a01b03161461030c576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61035e610a31565b6001600160a01b031661036f610639565b6001600160a01b0316146103b8576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b505050506040513d602081101561043157600080fd5b50505050565b6002544210156104785760405162461bcd60e51b8152600401808060200182810382526034815260200180611f4a6034913960400191505060405180910390fd5b6001600160a01b03808216600090815260046020526040902080549091166104d15760405162461bcd60e51b8152600401808060200182810382526037815260200180611f7e6037913960400191505060405180910390fd5b600081600101541180156104e9575060008160020154115b15610635576001808201805460028401805460009384905590839055925484546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051939594919092169263a9059cbb926044808201936020939283900390910190829087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b505050506040513d602081101561058a57600080fd5b50516105c75760405162461bcd60e51b815260040180806020018281038252603a815260200180611f10603a913960400191505060405180910390fd5b82546040805163246132f960e01b8152600481018590526024810184905290516001600160a01b039092169163246132f99160448082019260009290919082900301818387803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b5050505050505b5050565b6000546001600160a01b031690565b60025481565b60035461068c5760405162461bcd60e51b8152600401808060200182810382526045815260200180611ecb6045913960600191505060405180910390fd5b60005b6003548110156106cb576106c3600382815481106106a957fe5b6000918252602090912001546001600160a01b0316610437565b60010161068f565b50565b6106d6610a31565b6001600160a01b03166106e7610639565b6001600160a01b031614610730576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020526040902080549091161561078a5760405162461bcd60e51b815260040180806020018281038252602f815260200180611e7c602f913960400191505060405180910390fd5b60015460405130916001600160a01b03169086906107a790610a35565b6001600160a01b03938416815291831660208301529091166040808301919091525190819003606001906000f0801580156107e6573d6000803e3d6000fd5b5081546001600160a01b03199081166001600160a01b039283161783556001808401959095556002909201929092556003805493840181556000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90920180549092169216919091179055565b61085c610a31565b6001600160a01b031661086d610639565b6001600160a01b0316146108b6576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6001600160a01b038084166000908152600460205260409020805490911661090f5760405162461bcd60e51b815260040180806020018281038252602b815260200180611e51602b913960400191505060405180910390fd5b600181019290925560029091015550565b6001546001600160a01b031681565b610937610a31565b6001600160a01b0316610948610639565b6001600160a01b031614610991576040805162461bcd60e51b81526020600482018190526024820152600080516020611eab833981519152604482015290519081900360640190fd5b6001600160a01b0381166109d65760405162461bcd60e51b8152600401808060200182810382526026815260200180611e2b6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6113e880610a438339019056fe60806040526000600455600060055534801561001a57600080fd5b506040516113e83803806113e88339818101604052606081101561003d57600080fd5b508051602082015160409092015160018055600280546001600160a01b039485166001600160a01b03199182161790915560038054928516928216929092179091556000805493909216921691909117905561134a8061009e6000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c806380faa57d116100ad578063d1af0c7d11610071578063d1af0c7d14610295578063df136d651461029d578063e9fad8ee146102a5578063ebe2b12b146102ad578063ecd9ba82146102b55761012b565b806380faa57d1461023a5780638b87634714610242578063a694fc3a14610268578063c8f33c9114610285578063cd3daf9d1461028d5761012b565b80633d18b912116100f45780633d18b912146101d85780633fc6df6e146101e057806370a082311461020457806372f702f31461022a5780637b0a47ee146102325761012b565b80628cc262146101305780630700037d1461016857806318160ddd1461018e578063246132f9146101965780632e1a7d4d146101bb575b600080fd5b6101566004803603602081101561014657600080fd5b50356001600160a01b03166102ed565b60408051918252519081900360200190f35b6101566004803603602081101561017e57600080fd5b50356001600160a01b031661036b565b61015661037d565b6101b9600480360360408110156101ac57600080fd5b5080359060200135610384565b005b6101b9600480360360208110156101d157600080fd5b5035610612565b6101b9610795565b6101e86108b9565b604080516001600160a01b039092168252519081900360200190f35b6101566004803603602081101561021a57600080fd5b50356001600160a01b03166108c8565b6101e86108e3565b6101566108f2565b6101566108f8565b6101566004803603602081101561025857600080fd5b50356001600160a01b031661090b565b6101b96004803603602081101561027e57600080fd5b503561091d565b610156610a9e565b610156610aa4565b6101e8610af2565b610156610b01565b6101b9610b07565b610156610b2a565b6101b9600480360360a08110156102cb57600080fd5b5080359060208101359060ff6040820135169060608101359060800135610b30565b6001600160a01b0381166000908152600960209081526040808320546008909252822054610365919061035f90670de0b6b3a7640000906103599061033a90610334610aa4565b90610d40565b6001600160a01b0388166000908152600b602052604090205490610d9d565b90610dfd565b90610e64565b92915050565b60096020526000908152604090205481565b600a545b90565b6000546001600160a01b031633146103cd5760405162461bcd60e51b815260040180806020018281038252602a8152602001806112c1602a913960400191505060405180910390fd5b60006103d7610aa4565b6007556103e26108f8565b6006556001600160a01b03811615610429576103fd816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b6004546104364284610e64565b1015610489576040805162461bcd60e51b815260206004820152601d60248201527f43616e6e6f7420726564756365206578697374696e6720706572696f64000000604482015290519081900360640190fd5b60045442106104a45761049c8383610dfd565b6005556104e3565b6004546000906104b49042610d40565b905060006104cd60055483610d9d90919063ffffffff16565b90506104dd846103598784610e64565b60055550505b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561052e57600080fd5b505afa158015610542573d6000803e3d6000fd5b505050506040513d602081101561055857600080fd5b505190506105668184610dfd565b60055411156105bc576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b4260068190556105cc9084610e64565b600481905560408051868152602081019290925280517f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f559281900390910190a150505050565b60026001541415610658576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b600260015533610666610aa4565b6007556106716108f8565b6006556001600160a01b038116156106b85761068c816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b60008211610701576040805162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b604482015290519081900360640190fd5b600a5461070e9083610d40565b600a55336000908152600b602052604090205461072b9083610d40565b336000818152600b6020526040902091909155600354610757916001600160a01b039091169084610ebe565b60408051838152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a2505060018055565b600260015414156107db576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b6002600155336107e9610aa4565b6007556107f46108f8565b6006556001600160a01b0381161561083b5761080f816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b3360009081526009602052604090205480156108b1573360008181526009602052604081205560025461087a916001600160a01b039091169083610ebe565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505060018055565b6000546001600160a01b031681565b6001600160a01b03166000908152600b602052604090205490565b6003546001600160a01b031681565b60055481565b600061090642600454610f15565b905090565b60086020526000908152604090205481565b60026001541415610963576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b600260015533610971610aa4565b60075561097c6108f8565b6006556001600160a01b038116156109c357610997816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b60008211610a09576040805162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015290519081900360640190fd5b600a54610a169083610e64565b600a55336000908152600b6020526040902054610a339083610e64565b336000818152600b6020526040902091909155600354610a60916001600160a01b03909116903085610f2b565b60408051838152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a2505060018055565b60065481565b6000600a5460001415610aba5750600754610381565b610906610ae9600a54610359670de0b6b3a7640000610ae3600554610ae36006546103346108f8565b90610d9d565b60075490610e64565b6002546001600160a01b031681565b60075481565b336000908152600b6020526040902054610b2090610612565b610b28610795565b565b60045481565b60026001541415610b76576040805162461bcd60e51b815260206004820152601f602482015260008051602061125a833981519152604482015290519081900360640190fd5b600260015533610b84610aa4565b600755610b8f6108f8565b6006556001600160a01b03811615610bd657610baa816102ed565b6001600160a01b0382166000908152600960209081526040808320939093556007546008909152919020555b60008611610c1c576040805162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015290519081900360640190fd5b600a54610c299087610e64565b600a55336000908152600b6020526040902054610c469087610e64565b336000818152600b602052604080822093909355600354835163d505accf60e01b81526004810193909352306024840152604483018a90526064830189905260ff8816608484015260a4830187905260c4830186905292516001600160a01b039093169263d505accf9260e480820193929182900301818387803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b5050600354610cfe92506001600160a01b03169050333089610f2b565b60408051878152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a250506001805550505050565b600082821115610d97576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082610dac57506000610365565b82820282848281610db957fe5b0414610df65760405162461bcd60e51b81526004018080602001828103825260218152602001806112a06021913960400191505060405180910390fd5b9392505050565b6000808211610e53576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610e5c57fe5b049392505050565b600082820183811015610df6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f10908490610f8b565b505050565b6000818310610f245781610df6565b5090919050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610f85908590610f8b565b50505050565b6060610fe0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661103c9092919063ffffffff16565b805190915015610f1057808060200190516020811015610fff57600080fd5b5051610f105760405162461bcd60e51b815260040180806020018281038252602a8152602001806112eb602a913960400191505060405180910390fd5b606061104b8484600085611053565b949350505050565b6060824710156110945760405162461bcd60e51b815260040180806020018281038252602681526020018061127a6026913960400191505060405180910390fd5b61109d856111af565b6110ee576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061112d5780518252601f19909201916020918201910161110e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461118f576040519150601f19603f3d011682016040523d82523d6000602084013e611194565b606091505b50915091506111a48282866111b5565b979650505050505050565b3b151590565b606083156111c4575081610df6565b8251156111d45782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561121e578181015183820152602001611206565b50505050905090810190601f16801561124b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616c6c6572206973206e6f742052657761726473446973747269627574696f6e20636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a98cc374ed321108ca93d1cb79691ac605e09e11e7a4873acee7a64589b3b08b64736f6c634300060c00334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735374616b696e6752657761726473466163746f72793a3a7570646174653a206e6f74206465706c6f7965645374616b696e6752657761726473466163746f72793a3a6465706c6f793a20616c7265616479206465706c6f7965644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e74733a2063616c6c6564206265666f726520616e79206465706c6f79735374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e743a207472616e73666572206661696c65645374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e743a206e6f742072656164795374616b696e6752657761726473466163746f72793a3a6e6f74696679526577617264416d6f756e743a206e6f74206465706c6f796564a26469706673582212207de2bcf65422c070b148738fb1e1ad24440503c7b06918e4e81ff4dc5e36f7a764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5363,
        "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5365,
        "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "stakingRewardsGenesis",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5368,
        "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "stakingTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5379,
        "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "stakingRewardsInfoByStakingToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(StakingRewardsInfo)5375_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(StakingRewardsInfo)5375_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingRewardsFactory.StakingRewardsInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingRewardsInfo)5375_storage"
      },
      "t_struct(StakingRewardsInfo)5375_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewardsFactory.StakingRewardsInfo",
        "members": [
          {
            "astId": 5370,
            "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
            "label": "stakingRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5372,
            "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5374,
            "contract": "contracts/synth/StakingRewardsFactory.sol:StakingRewardsFactory",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}